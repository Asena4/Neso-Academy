? :
It is a ternary operator (the only one in C language list of operators) therefore requires three operands

char result;
int marks;

if (marks > 33)
{
	result = 'p';
}
else
{
	result = 'f';
}

All that can be substituted with

char result;
int marks;

result = (marks > 33) ? 'p' : 'f';

(marks > 33) is a boolean expression therefore it will return either TRUE or FALSE
(marks > 33) ? 'p' : 'f' is a conditional expression, which is after all an expression, therefore it is an r-value and result is l-value.

Expression1 ? Expression2 : Expression3, expression1 is the boolean expression. If we simply write 0 instead of some boolean expression then that means FALSE and therefore Expression3 will get evaluated.
result = 0 ? 2 : 1
result = 1

#include <stdio.h>

int main()
{
	int var = 75;
	int var2 = 56;
	int num;

	num = sizeof(var) ? (var2 > 23 ? ((var == 75) ? 'A' : 0) : 0) : 0;

	printf("%d", num);
	return 0;
}

'var' value inside the variable 'num' is the same as the 'var' value declared in the 'main' function.
Comparing 75==75 is a boolean which will result to TRUE which has the value 1.
In the ASCII Table the decimal value for 'A' is 65.
1 ? 65 : 0
Result is 65
num = sizeof(var) ? (var2 > 23 ? 65 : 0) : 0;
It is TRUE that 56>23, thus value will be 1
num = sizeof(var) ? (1 ? 65 : 0) : 0;
num = sizeof(var) ? 65 : 0;
sizeof(int) will be 4
num = 4 ? 65 : 0;
Any other number beside 0 will result to a TRUE thus
num = 65
