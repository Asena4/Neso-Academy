& , | , ~ , << , >> , ^

It takes two bits at a time and perform AND operation.
AND (&) is binary operator. It takes two numbers and perform bitwise AND.
Result of AND is 1 when both bits are 1
0 & 0 = 0
0 & 1 = 0
1 & 0 = 0
1 & 1 = 1

7 ---> 0111
4 ---> 0100
4 <--- 0100

It takes two bits at a time and perform OR operation.
OR (|) is binary operator. It takes two numbers and perform bitwise OR.
Result of OR is 0 when both bits are 0

0 | 0 = 0
0 | 1 = 1
1 | 0 = 1
1 | 1 = 1

7 ---> 0111
4 ---> 0100
7 <--- 0111

NOT (~) is a unary operator
Its job is to complement each bit one by one.
Result of NOT is 0 when bit is 1 and when bit is 1 is 0

~0 = 1
~1 = 0

7 ---> 0111
8 <--- 1000
~7 = 8

LEFT SHIFT OPERATOR
################################
First operand                  <<       Second operand
whose bits get left shifted             Decides the number of places to shift the bits

When bits are shifted left then trailing positions are filled with zeros.

#include <stdio.h>

int main()
{
	char var = 3;           // 3 (0000 0011)
	printf("%d", var<<1);
	return 0;
}

Value printed will be 6

Left shifting is equivalent to multiplication by 2^right-operand
var = 3;
var << 1
6 [3 * 2^1]

var = 3;
var << 4
48 [3 * 2^4]

RIGHT SHIFT OPERATOR
########################
First operand                   >>       Second operand
whose bits get right shifted             Decides the number of places to shift the bits

When bits are shifted right then leading positions are filled with zeros.

#include <stdio.h>

int main()
{
        char var = 3;           // 3 (0000 0011)
        printf("%d", var>>1);
        return 0;
}

Value printed will be 1

Right shifting is equivalent to division by 2^right-operand

var = 3;
var >> 1
1 [3 * 2^1]

var = 32;
var >> 4
2 [32 / 2^4]

XOR OPERATOR
####################
Inclusive OR                                   Exclusive OR  
Either A is 1 or B is 1 or Both are 1,         Either A is 1 or B is 1 then the output is 1 but when
then the output is 1. INcluding BOTH.          both A and B are 1 then output is 0. EXcluding BOTH.

A  B  A OR B                                   A  B  A XOR B
0  0  0                                        0  0  0
0  1  1                                        0  1  1
1  0  1                                        1  0  1
1  1  1                                        1  1  0

Bitwise XOR (^) is a binary operator. It takes two numbers and perform bitwise XOR.
Result of XOR is 1 when two bits are different otherwise the result is 0.

7 ---> 0111
4 ---> 0100
3 <--- 0011

7 ^ 4 = 3

